/*
 * Demo TLS API
 *
 * Copyright (C) 2020-2021, HENSOLDT Cyber GmbH
 */

import <std_connector.camkes>;

import <if_OS_Entropy.camkes>;

#include "config/SystemConfig.h"
#include "config/DemoConfig.h"

#include "EntropySource/camkes/EntropySource.camkes"
EntropySource_COMPONENT_DEFINE(EntropySource)

#include "TimeServer/camkes/TimeServer.camkes"
TimeServer_COMPONENT_DEFINE(TimeServer)

#include "TlsServer/camkes/TlsServer.camkes"
TlsServer_COMPONENT_DEFINE(TlsServer)

#include "os_network_stack/network_stack.camkes"
NwStack_COMPONENT_DEFINE(
    NwStack,
    NIC_DRIVER_RINGBUFFER_SIZE,
    1,
    NwStack_NO_ADDITIONAL_INTERFACES)

import "components/Demo/demo_OS_Tls.camkes";
import "components/Ticker/Ticker.camkes";

#include "plat_nic.camkes"

assembly {
    composition {
        //----------------------------------------------------------------------
        // Ticker
        //----------------------------------------------------------------------
        component  Ticker ticker;

        //----------------------------------------------------------------------
        // Network Driver
        //----------------------------------------------------------------------
        TLS_API_DEMO_NIC_INSTANCE(nwDriver)

        //----------------------------------------------------------------------
        // NwStack
        //----------------------------------------------------------------------
        component NwStack nwStack;

        NwStack_INSTANCE_CONNECT(
            nwStack,
            ticker.e_timeout_nwstacktick,
            nwDriver
        )

        NwStack_INSTANCE_CONNECT_CLIENT(
            nwStack,
            demo,
            networkStack_rpc,
            networkStack_port)

        //----------------------------------------------------------------------
        // TimeServer
        //----------------------------------------------------------------------
        component TimeServer timeServer;

        TimeServer_INSTANCE_CONNECT_CLIENTS(
            timeServer,
            ticker.timeServer_rpc, ticker.timeServer_notify,
            // platform specific components, macro will add a comma(s) if any
            TLS_API_DEMO_NIC_CONNECTION_TIMESERVER(nwDriver)
            nwStack.timeServer_rpc, nwStack.timeServer_notify)

        //----------------------------------------------------------------------
        // Network Stack App #1: TLS Demo
        //----------------------------------------------------------------------
        component demo_OS_Tls demo;

        component EntropySource entropySource_demo;

        EntropySource_INSTANCE_CONNECT_CLIENT(
            entropySource_demo,
            demo.entropy_rpc,
            demo.entropy_port
        )

        //----------------------------------------------------------------------
        // Network Stack App #2: TlsServer
        //----------------------------------------------------------------------
        component EntropySource entropySource_tlsServer;
        component TlsServer tlsServer;

        TlsServer_INSTANCE_CONNECT(
            tlsServer,
            entropySource_tlsServer.entropy_rpc,
            entropySource_tlsServer.entropy_port,
            nwStack.networkStack_rpc,
            nwStack.socket_1_port
        )

        TlsServer_INSTANCE_CONNECT_CLIENT(
            tlsServer,
            demo.tlsServer_rpc,
            demo.tlsServer_port
        )
    }

    configuration {
        TlsServer_CLIENT_ASSIGN_BADGES(
            demo.tlsServer_rpc
        )
        TimeServer_CLIENT_ASSIGN_BADGES(
            ticker.timeServer_rpc,
            // platform specific components, macro will add a comma(s) if any
            TLS_API_DEMO_NIC_TIMESERVER_CLIENTS(nwDriver)
            nwStack.timeServer_rpc
        )
        TlsServer_INSTANCE_CONFIGURE(
            tlsServer, TLS_HOST_CERT)
        TLS_API_DEMO_NIC_CONFIG(nwDriver)
    }
}
