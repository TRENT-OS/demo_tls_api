/*
 * Demo TLS API
 *
 * Copyright (C) 2020-2021, HENSOLDT Cyber GmbH
 */

import <std_connector.camkes>;

import <if_OS_Entropy.camkes>;

#include "config/SystemConfig.h"
#include "config/DemoConfig.h"

#include "EntropySource/camkes/EntropySource.camkes"
EntropySource_COMPONENT_DEFINE(EntropySource)

#include "TimeServer/camkes/TimeServer.camkes"
TimeServer_COMPONENT_DEFINE(TimeServer)

#include "TlsServer/camkes/TlsServer.camkes"
TlsServer_COMPONENT_DEFINE(TlsServer)

#include "NetworkStack_PicoTcp/camkes/NetworkStack_PicoTcp.camkes"
NetworkStack_PicoTcp_COMPONENT_DEFINE(
    NetworkStack_PicoTcp,
    NIC_DRIVER_RINGBUFFER_SIZE,
    NetworkStack_PicoTcp_NO_ADDITIONAL_INTERFACES
)

#include "components/DemoApp/DemoApp.camkes"

#include "components/DemoApp_TlsClient/DemoApp_TlsClient.camkes"

#include "plat_nic.camkes"

assembly {
    composition {
        //----------------------------------------------------------------------
        // Components used in application
        //----------------------------------------------------------------------
        component TimeServer              timeServer;
        TLS_API_DEMO_NIC_INSTANCE(nwDriver)
        component EntropySource           entropySource_demo;
        component EntropySource           entropySource_tlsServer;
        component NetworkStack_PicoTcp    nwStack;
        component TlsServer               tlsServer;
        component DemoApp                 demoApp;

        component DemoApp_TlsClient       client_2;
        component DemoApp_TlsClient       client_3;
        component DemoApp_TlsClient       client_4;
        component DemoApp_TlsClient       client_5;
        component DemoApp_TlsClient       client_6;
        component DemoApp_TlsClient       client_7;
        component DemoApp_TlsClient       client_8;


        //----------------------------------------------------------------------
        // Establish Connections
        //----------------------------------------------------------------------

        TimeServer_INSTANCE_CONNECT_CLIENTS(
            timeServer,
            // platform specific components, macro will add a comma(s) if any
            TLS_API_DEMO_NIC_CONNECTION_TIMESERVER(nwDriver)
            nwStack.timeServer_rpc, nwStack.timeServer_notify)

        EntropySource_INSTANCE_CONNECT_CLIENT(
            entropySource_demo,
            demoApp.entropy_rpc, demoApp.entropy_port
        )
        
        EntropySource_INSTANCE_CONNECT_CLIENT(
            entropySource_tlsServer,
            tlsServer.entropy_rpc , tlsServer.entropy_port
        )

        NetworkStack_PicoTcp_INSTANCE_CONNECT(
            nwStack,
            nwDriver
        )

        NetworkStack_PicoTcp_INSTANCE_CONNECT_CLIENTS(
            nwStack,
            demoApp, networkStack,
            tlsServer, networkStack
        )

        TlsServer_INSTANCE_CONNECT_CLIENTS(
            tlsServer,
            demoApp, tls,
            client_2, tls,
            client_3, tls,
            client_4, tls,
            client_5, tls,
            client_6, tls,
            client_7, tls,
            client_8, tls
        )

    }

    configuration {
        TimeServer_CLIENT_ASSIGN_BADGES(
            // platform specific components, macro will add a comma(s) if any
            TLS_API_DEMO_NIC_TIMESERVER_CLIENTS(nwDriver)
            nwStack.timeServer_rpc
        )

        TlsServer_CLIENT_ASSIGN_BADGES(
            demoApp, tls,
            client_2, tls,
            client_3, tls,
            client_4, tls,
            client_5, tls,
            client_6, tls,
            client_7, tls,
            client_8, tls
        )
        
        TlsServer_INSTANCE_CONFIGURE(
            tlsServer, TLS_HOST_CERT)
        
        TLS_API_DEMO_NIC_CONFIG(nwDriver)

        NetworkStack_PicoTcp_CLIENT_ASSIGN_BADGES(
            demoApp, networkStack,
            tlsServer, networkStack
        )

        NetworkStack_PicoTcp_INSTANCE_CONFIGURE_CLIENTS(
            nwStack,
            4,
            12
        )
    }
}
