/*  Copyright (C) 2020, Hensoldt Cyber GmbH */
import <std_connector.camkes>;

import <if_OS_Entropy.camkes>;

#include "config/SystemConfig.h"
#include "config/DemoConfig.h"

#include "ChanMux/ChanMux_UART.camkes"
ChanMux_UART_COMPONENT_DEFINE(
    ChanMux_UART,
    nwDriver_1, ctrl,
    nwDriver_1, data,
    nwDriver_2, ctrl,
    nwDriver_2, data
)

#include "NIC_ChanMux/NIC_ChanMux.camkes"
NIC_ChanMux_COMPONENT_DEFINE(NwDriver_1, NIC_DRIVER_RINGBUFFER_SIZE)
NIC_ChanMux_COMPONENT_DEFINE(NwDriver_2, NIC_DRIVER_RINGBUFFER_SIZE)

#include "EntropySource/camkes/EntropySource.camkes"
EntropySource_COMPONENT_DEFINE(EntropySource)

#include "TimeServer/camkes/TimeServer.camkes"
TimeServer_COMPONENT_DEFINE(TimeServer)

#include "TlsServer/camkes/TlsServer.camkes"
TlsServer_COMPONENT_DEFINE(TlsServer)

import "components/Demo/demo_OS_Tls.camkes";
import "components/NwStack/network_stack.camkes";
import "components/Ticker/Ticker.camkes";

assembly {
    composition {
        //----------------------------------------------------------------------
        // ChanMux + UART_0 (on Zynq7000)
        //----------------------------------------------------------------------
        component ChanMux_UART chanMux_UART;
        component UART_0 uart;

        ChanMux_UART_INSTANCE_CONNECT(
            chanMux_UART,
            uart
        )

        //----------------------------------------------------------------------
        // Ticker
        //----------------------------------------------------------------------
        component  Ticker ticker_1;
        connection seL4NotificationNative nwStack_1_tick (from ticker_1.e_timeout_nwstacktick, to nwStack_1.event_tick_or_data);
        component  Ticker ticker_2;
        connection seL4NotificationNative nwStack_2_tick (from ticker_2.e_timeout_nwstacktick, to nwStack_2.event_tick_or_data);

        //----------------------------------------------------------------------
        // TimeServer
        //----------------------------------------------------------------------
        component TimeServer timeServer;

        TimeServer_INSTANCE_CONNECT_CLIENTS(
            timeServer,
            ticker_1.timeServer_rpc, ticker_1.timeServer_notify,
            ticker_2.timeServer_rpc, ticker_2.timeServer_notify,
            nwStack_1.timeServer_rpc, nwStack_1.timeServer_notify,
            nwStack_2.timeServer_rpc, nwStack_2.timeServer_notify)

        //----------------------------------------------------------------------
        // Network Driver #1
        //----------------------------------------------------------------------
        component  NwDriver_1 nwDriver_1;

        ChanMux_UART_INSTANCE_CONNECT_CLIENT(
            chanMux_UART,
            nwDriver_1, data, ctrl
        )

        //----------------------------------------------------------------------
        // Network Stack #1
        //----------------------------------------------------------------------
        component  NwStack_1  nwStack_1;

        connection seL4NotificationNative NwStackdataAvail2 (from nwStack_1.event_internal, to nwStack_1.event_tick_or_data);
        connection seL4Notification       NwStackEventsRxd1 (from nwStack_1.e_write,        to nwStack_1.c_write);
        connection seL4Notification       NwStackEventsRxd2 (from nwStack_1.e_read,         to nwStack_1.c_read);
        connection seL4Notification       NwStackEventsRxd3 (from nwStack_1.e_conn,         to nwStack_1.c_conn);

        connection seL4NotificationNative NwStackdataAvail1                (from nwDriver_1.nic_event_hasData,  to nwStack_1.event_tick_or_data);
        connection seL4RPCCall            nwStack_NwDriver                 (from nwStack_1.nic_driver,          to nwDriver_1.nic_rpc);
        connection seL4SharedData         NwDriver_NwStack_ReadConnection  (from nwDriver_1.nic_port_to,        to nwStack_1.port_nic_from);
        connection seL4SharedData         NwDriver_NwStack_WriteConnection (from nwDriver_1.nic_port_from,      to nwStack_1.port_nic_to);

        //----------------------------------------------------------------------
        // Network Stack App #1
        //----------------------------------------------------------------------
        component  demo_OS_Tls      demo;

        connection seL4Notification NwAppInitDone        (from nwStack_1.event_network_init_done,  to demo.event_network_stack_init_done);
        connection seL4RPCCall      NwApp_nwStack        (from demo.network_stack_rpc,         to nwStack_1.network_stack_rpc);
        connection seL4SharedData   NwApp_dataConnection (from demo.NwAppDataPort,             to nwStack_1.port_app_io);

        component EntropySource     entropySource_demo;

        EntropySource_INSTANCE_CONNECT_CLIENT(
            entropySource_demo,
            demo.entropy_rpc,
            demo.entropy_port)

        //----------------------------------------------------------------------
        // Network Driver #2
        //----------------------------------------------------------------------
        component  NwDriver_2 nwDriver_2;

        ChanMux_UART_INSTANCE_CONNECT_CLIENT(
            chanMux_UART,
            nwDriver_2, data, ctrl
        )

        //----------------------------------------------------------------------
        // Network Stack #2
        //----------------------------------------------------------------------
        component  NwStack_2  nwStack_2;

        connection seL4NotificationNative NwStackdataAvail2_2 (from nwStack_2.event_internal, to nwStack_2.event_tick_or_data);
        connection seL4Notification       NwStackEventsRxd1_2 (from nwStack_2.e_write,        to nwStack_2.c_write);
        connection seL4Notification       NwStackEventsRxd2_2 (from nwStack_2.e_read,         to nwStack_2.c_read);
        connection seL4Notification       NwStackEventsRxd3_2 (from nwStack_2.e_conn,         to nwStack_2.c_conn);

        connection seL4NotificationNative NwStackdataAvail1_2               (from nwDriver_2.nic_event_hasData,  to nwStack_2.event_tick_or_data);
        connection seL4RPCCall            nwStack_NwDriver_2                (from nwStack_2.nic_driver,          to nwDriver_2.nic_rpc);
        connection seL4SharedData         NwDriver_NwStack_ReadConnection_2 (from nwDriver_2.nic_port_to,        to nwStack_2.port_nic_from);
        connection seL4SharedData         NwDriver_NwStack_WriteConnection_2(from nwDriver_2.nic_port_from,      to nwStack_2.port_nic_to);

        //----------------------------------------------------------------------
        // Network Stack App #2, TlsServer
        //----------------------------------------------------------------------
        component EntropySource     entropySource_tlsServer;
        component TlsServer         tlsServer;

        EntropySource_INSTANCE_CONNECT_CLIENT(
            entropySource_tlsServer,
            tlsServer.entropy_rpc,
            tlsServer.entropy_port)
        TlsServer_INSTANCE_CONNECT(
            tlsServer,
            entropySource_tlsServer.entropy_rpc,
            entropySource_tlsServer.entropy_port,
            nwStack_2.network_stack_rpc,
            nwStack_2.port_app_io,
            nwStack_2.event_network_init_done)
        TlsServer_INSTANCE_CONNECT_CLIENT(
            tlsServer,
            demo.tlsServer_rpc,
            demo.tlsServer_port)
    }

    configuration {
        ChanMux_UART_CLIENT_ASSIGN_BADGES(
            nwDriver_1.chanMux_Rpc,
            nwDriver_2.chanMux_Rpc
        )
        TlsServer_CLIENT_ASSIGN_BADGES(
            demo.tlsServer_rpc
        )
        TimeServer_CLIENT_ASSIGN_BADGES(
            ticker_1.timeServer_rpc,
            ticker_2.timeServer_rpc,
            nwStack_1.timeServer_rpc,
            nwStack_2.timeServer_rpc
        )
        TlsServer_INSTANCE_CONFIGURE(
            tlsServer, TLS_HOST_CERT)
    }
}
