/*
 * Demo TLS API
 *
 * Copyright (C) 2020, HENSOLDT Cyber GmbH
 */

import <std_connector.camkes>;

import <if_OS_Entropy.camkes>;

#include "config/SystemConfig.h"
#include "config/DemoConfig.h"

#include "ChanMux/ChanMux_UART.camkes"
ChanMux_UART_COMPONENT_DEFINE(
    ChanMux_UART,
    nwDriver, ctrl,
    nwDriver, data
)

#include "NIC_ChanMux/NIC_ChanMux.camkes"
NIC_ChanMux_COMPONENT_DEFINE(NwDriver, NIC_DRIVER_RINGBUFFER_SIZE)

#include "EntropySource/camkes/EntropySource.camkes"
EntropySource_COMPONENT_DEFINE(EntropySource)

#include "TimeServer/camkes/TimeServer.camkes"
TimeServer_COMPONENT_DEFINE(TimeServer)

#include "TlsServer/camkes/TlsServer.camkes"
TlsServer_COMPONENT_DEFINE(TlsServer)

#include "components/NwStack/network_stack.camkes"
NwStack_COMPONENT_DEFINE(NwStack)

import "components/Demo/demo_OS_Tls.camkes";
import "components/Ticker/Ticker.camkes";

assembly {
    composition {
        //----------------------------------------------------------------------
        // ChanMux + UART_0 (on Zynq7000)
        //----------------------------------------------------------------------
        component ChanMux_UART chanMux_UART;
        component UART_0 uart;

        ChanMux_UART_INSTANCE_CONNECT(
            chanMux_UART,
            uart
        )

        //----------------------------------------------------------------------
        // NwStack
        //----------------------------------------------------------------------
        NwStack_INSTANCE_DECLARE(NwStack, nwStack)

        //----------------------------------------------------------------------
        // Ticker
        //----------------------------------------------------------------------
        component  Ticker ticker;
        connection seL4NotificationNative nwStack_tick (from ticker.e_timeout_nwstacktick, to nwStack.event_tick_or_data);

        //----------------------------------------------------------------------
        // TimeServer
        //----------------------------------------------------------------------
        component TimeServer timeServer;

        TimeServer_INSTANCE_CONNECT_CLIENTS(
            timeServer,
            ticker.timeServer_rpc, ticker.timeServer_notify,
            nwStack.timeServer_rpc, nwStack.timeServer_notify)

        //----------------------------------------------------------------------
        // Network Driver
        //----------------------------------------------------------------------
        component  NwDriver nwDriver;

        ChanMux_UART_INSTANCE_CONNECT_CLIENT(
            chanMux_UART,
            nwDriver, data, ctrl
        )

        // NwDriver connection
        connection seL4NotificationNative NwStackdataAvailDriver           (from nwDriver.nic_event_hasData,  to nwStack.event_tick_or_data);
        connection seL4SharedData         NwDriver_NwStack_ReadConnection  (from nwDriver.nic_port_to,        to nwStack.nic_from_port);
        connection seL4SharedData         NwDriver_NwStack_WriteConnection (from nwDriver.nic_port_from,      to nwStack.nic_to_port);
        connection seL4RPCCall            nwStack_NwDriver                 (from nwStack.nic_driver,          to nwDriver.nic_rpc);

        //----------------------------------------------------------------------
        // Network Stack App #1
        //----------------------------------------------------------------------
        component  demo_OS_Tls      demo;

        connection seL4RPCCall      NwApp_nwStack        (from demo.networkStack_rpc,         to nwStack.networkStack_rpc);
        connection seL4SharedData   NwApp_dataConnection (from demo.networkStack_port,             to nwStack.port_socket_1);

        component EntropySource     entropySource_demo;

        EntropySource_INSTANCE_CONNECT_CLIENT(
            entropySource_demo,
            demo.entropy_rpc,
            demo.entropy_port)

        //----------------------------------------------------------------------
        // Network Stack App #2, TlsServer
        //----------------------------------------------------------------------
        component EntropySource     entropySource_tlsServer;
        component TlsServer         tlsServer;

        TlsServer_INSTANCE_CONNECT(
            tlsServer,
            entropySource_tlsServer.entropy_rpc,
            entropySource_tlsServer.entropy_port,
            nwStack.networkStack_rpc,
            nwStack.port_socket_1)
        TlsServer_INSTANCE_CONNECT_CLIENT(
            tlsServer,
            demo.tlsServer_rpc,
            demo.tlsServer_port)
    }

    configuration {
        ChanMux_UART_CLIENT_ASSIGN_BADGES(
            nwDriver.chanMux_Rpc
        )
        TlsServer_CLIENT_ASSIGN_BADGES(
            demo.tlsServer_rpc
        )
        TimeServer_CLIENT_ASSIGN_BADGES(
            ticker.timeServer_rpc,
            nwStack.timeServer_rpc
        )
        TlsServer_INSTANCE_CONFIGURE(
            tlsServer, TLS_HOST_CERT)
    }
}
