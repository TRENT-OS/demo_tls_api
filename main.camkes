import <std_connector.camkes>;

import <if_OS_Entropy.camkes>;

#include "config/SystemConfig.h"

#include "UART/Uart.camkes"
DECLARE_COMPONENT_UART(UART)

#include "ChanMux/ChanMux.camkes"
ChanMux_DEFINE_COMPONENT(ChanMux,
        nwDriver_1, data,
        nwDriver_1, ctrl,
        nwDriver_2, data,
        nwDriver_2, ctrl)

#include "NIC_ChanMux/NIC_ChanMux.camkes"
DECLARE_COMPONENT_NIC_ChanMux(NwDriver_1)
DECLARE_COMPONENT_NIC_ChanMux(NwDriver_2)

#include "TimeServer/camkes/TimeServer.camkes"
DECLARE_COMPONENT_TimeServer(TimeServer)

#include "EntropySource/camkes/EntropySource.camkes"
DECLARE_COMPONENT_EntropySource(EntropySource)

import "components/NwStack/network_stack.camkes";
import "components/Ticker/Ticker.camkes";

import "components/TlsRpcServer/TlsRpcServer.camkes";

import "components/Demo/demo_OS_Tls.camkes";

assembly {
    composition {
        //----------------------------------------------------------------------
        // UART
        //----------------------------------------------------------------------
        DECLARE_AND_CONNECT_INSTANCE_UART(UART, uartDrv)

        //----------------------------------------------------------------------
        // MUX
        //----------------------------------------------------------------------
        ChanMux_DECLARE_AND_CONNECT_INSTANCE_TO_UART(ChanMux, chanMux, uartDrv)

        //----------------------------------------------------------------------
        // Ticker
        //----------------------------------------------------------------------
        component  Ticker ticker_1;
        connection seL4NotificationNative nwStack_1_tick (from ticker_1.e_timeout_nwstacktick, to nwStack_1.event_tick_or_data);
        component  Ticker ticker_2;
        connection seL4NotificationNative nwStack_2_tick (from ticker_2.e_timeout_nwstacktick, to nwStack_2.event_tick_or_data);

        //----------------------------------------------------------------------
        // TimeServer
        //----------------------------------------------------------------------
        DECLARE_AND_CONNECT_INSTANCE_TimeServer(
            TimeServer,
            timeServer,
            ticker_1.timeServer_rpc,
            ticker_2.timeServer_rpc,
            nwStack_1.timeServer_rpc,
            nwStack_2.timeServer_rpc)

        //----------------------------------------------------------------------
        // Network Driver #1
        //----------------------------------------------------------------------
        component  NwDriver_1 nwDriver_1;

        ChanMux_INSTANCE_CONNECT_INTERFACE(chanMux, nwDriver_1)
        ChanMux_INSTANCE_CONNECT_CHANNEL(chanMux, nwDriver_1, data)
        ChanMux_INSTANCE_CONNECT_CHANNEL(chanMux, nwDriver_1, ctrl)

        //----------------------------------------------------------------------
        // Network Stack #1
        //----------------------------------------------------------------------
        component  NwStack_1  nwStack_1;

        connection seL4NotificationNative NwStackdataAvail2 (from nwStack_1.event_internal, to nwStack_1.event_tick_or_data);
        connection seL4Notification       NwStackEventsRxd1 (from nwStack_1.e_write,        to nwStack_1.c_write);
        connection seL4Notification       NwStackEventsRxd2 (from nwStack_1.e_read,         to nwStack_1.c_read);
        connection seL4Notification       NwStackEventsRxd3 (from nwStack_1.e_conn,         to nwStack_1.c_conn);

        connection seL4NotificationNative NwStackdataAvail1                (from nwDriver_1.nic_event_hasData,  to nwStack_1.event_tick_or_data);
        connection seL4RPCCall            nwStack_NwDriver                 (from nwStack_1.nic_driver,          to nwDriver_1.nic_rpc);
        connection seL4SharedData         NwDriver_NwStack_ReadConnection  (from nwDriver_1.nic_port_to,        to nwStack_1.port_nic_from);
        connection seL4SharedData         NwDriver_NwStack_WriteConnection (from nwDriver_1.nic_port_from,      to nwStack_1.port_nic_to);

        //----------------------------------------------------------------------
        // Network Stack App #1
        //----------------------------------------------------------------------
        component  demo_OS_Tls      demo;

        connection seL4Notification NwAppInitDone        (from nwStack_1.event_network_init_done,  to demo.event_network_stack_init_done);
        connection seL4RPCCall      NwApp_nwStack        (from demo.network_stack_rpc,         to nwStack_1.network_stack_rpc);
        connection seL4SharedData   NwApp_dataConnection (from demo.NwAppDataPort,             to nwStack_1.port_app_io);

        DECLARE_AND_CONNECT_INSTANCE_EntropySource(
            EntropySource,
            entropySource_demo,
            demo.entropy_rpc,
            demo.entropy_port)

        //----------------------------------------------------------------------
        // Network Driver #2
        //----------------------------------------------------------------------
        component  NwDriver_2 nwDriver_2;

        ChanMux_INSTANCE_CONNECT_INTERFACE(chanMux, nwDriver_2)
        ChanMux_INSTANCE_CONNECT_CHANNEL(chanMux, nwDriver_2, data)
        ChanMux_INSTANCE_CONNECT_CHANNEL(chanMux, nwDriver_2, ctrl)

        //----------------------------------------------------------------------
        // Network Stack #2
        //----------------------------------------------------------------------
        component  NwStack_2  nwStack_2;

        connection seL4NotificationNative NwStackdataAvail2_2 (from nwStack_2.event_internal, to nwStack_2.event_tick_or_data);
        connection seL4Notification       NwStackEventsRxd1_2 (from nwStack_2.e_write,        to nwStack_2.c_write);
        connection seL4Notification       NwStackEventsRxd2_2 (from nwStack_2.e_read,         to nwStack_2.c_read);
        connection seL4Notification       NwStackEventsRxd3_2 (from nwStack_2.e_conn,         to nwStack_2.c_conn);

        connection seL4NotificationNative NwStackdataAvail1_2               (from nwDriver_2.nic_event_hasData,  to nwStack_2.event_tick_or_data);
        connection seL4RPCCall            nwStack_NwDriver_2                (from nwStack_2.nic_driver,          to nwDriver_2.nic_rpc);
        connection seL4SharedData         NwDriver_NwStack_ReadConnection_2 (from nwDriver_2.nic_port_to,        to nwStack_2.port_nic_from);
        connection seL4SharedData         NwDriver_NwStack_WriteConnection_2(from nwDriver_2.nic_port_from,      to nwStack_2.port_nic_to);

        //----------------------------------------------------------------------
        // Network Stack App #2
        //----------------------------------------------------------------------
        component  TlsRpcServer     tlsRpcServer;

        connection seL4Notification NwAppInitDone_2        (from nwStack_2.event_network_init_done,     to tlsRpcServer.event_network_stack_init_done);
        connection seL4RPCCall      NwApp_nwStack_2        (from tlsRpcServer.network_stack_rpc,        to nwStack_2.network_stack_rpc);
        connection seL4SharedData   NwApp_dataConnection_2 (from tlsRpcServer.NwAppDataPort,            to nwStack_2.port_app_io);

        DECLARE_AND_CONNECT_INSTANCE_EntropySource(
            EntropySource,
            entropySource_tlsServer,
            tlsRpcServer.entropy_rpc,
            tlsRpcServer.entropy_port)

        //----------------------------------------------------------------------
        // Connecting DEMO_TLS to tlsRpcServer
        //----------------------------------------------------------------------
        connection seL4RPCCall      demoTls_tlsRpcServer        (from demo.TlsRpcServer,         to tlsRpcServer.TlsRpcServer);
        connection seL4RPCCall      demoTls_TlsApi              (from demo.tls_rpc,              to tlsRpcServer.tls_rpc);
        connection seL4SharedData   tlsDataport                 (from demo.tlsClientDataport,    to tlsRpcServer.tlsServerDataport);
    }

    configuration {
        CONFIGURE_INSTANCE_UART(
            uartDrv,
            CFG_CHANMUX_DEFAULT_UART_PHYS_ADDR,
            CFG_CHANMUX_DEFAULT_UART_INTR)

        // assign endpoint badges for n:1 RPC interface of ChanMUX. The generic
        // naming scheme is <component>.<interface>_attributes = <badge ID>
        ChanMux_ASSIGN_CLIENT_BADGE(chanMux, nwDriver_1, CHANMUX_ID_NIC_1)
        ChanMux_ASSIGN_CLIENT_BADGE(chanMux, nwDriver_2, CHANMUX_ID_NIC_2)
    }
}
